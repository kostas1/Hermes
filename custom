module Handler.Post where
import Import
import Handler.Global

getPostTags :: GHandler Hermes Hermes [Entity Tag]
getPostTags = do
    tags <- runDB $ selectList [] [Desc TagName]
    return tags

getCreatePostR :: Handler RepHtml
getCreatePostR = do
    tags <- getPostTags
    ((_, widget), enctype) <- generateFormPost (postForm (Nothing, tags))
    specificLayout (menu CreatePostR, menu CreatePostR, [whamlet|
<form method=post action=@{CreatePostR} enctype=#{enctype}>
    ^{postEditWidgetStyles}
    ^{widget}
    <input type=submit>
|])

insertPost :: Post -> Maybe Text -> GHandler Hermes Hermes (PostId, Text)
insertPost (Post t c b a p _ tgs) tags = do
    let slug = (pack (concat $ intersperse "-" $ take 5 $ words (unpack t)))
    extracted <- extractPostTags tags
    case extracted of
        Nothing -> do
            val <- runDB $ insert (Post t c b a p slug tgs)
            return (val, slug)
        Just tag -> do
            val <- runDB $ insert (Post t c b a p slug (tgs ++ tag))
            return (val, slug)

updatePost :: PostId -> Post -> Maybe Text -> GHandler Hermes Hermes ()
updatePost postId (Post t c b _ p _ tagList) tags = do
    extracted <- extractPostTags tags
    runDB $ update postId [PostTitle =. t,
                                          PostCreated =. c,
                                          PostBody =. b,
                                          PostPublished =. p,
                                          PostTags =. case extracted of
                                                        Nothing -> tagList
                                                        Just tagz -> tagList ++ tagz]

extractPostTags :: Maybe Text -> GHandler Hermes Hermes (Maybe [Text])
extractPostTags Nothing = return Nothing
extractPostTags (Just t) = do
    let tags = (splitOn (pack ",") t) :: [Text]
    case tags of
        (_:_) -> do
            results <- mapM (\tag -> (runDB $ insertBy (Tag tag))) tags
            case results of
                (_:_) -> return $ Just $ map (\e -> tagName $ entityVal e) (lefts results)
                _ -> return Nothing
        _ -> return Nothing



newTagsCorrect :: Maybe Text -> Bool
newTagsCorrect Nothing = True
newTagsCorrect (Just tags) = all (\a -> isLetter a || a == ',') tags

postCreatePostR :: Handler RepHtml
postCreatePostR = do
    tags <- getPostTags
    ((result, widget), enctype) <- runFormPost (postForm (Nothing, tags))
    case result of
        FormSuccess ((Post t c b a p s tagList), newTags) -> do
            case newTagsCorrect newTags of
                False -> invalidArgs [pack "Tags textfield contains bad value. Please follow formatting."]
                True -> do
                    (_, slug) <- insertPost (Post t c b a p s tagList) newTags
                    redirect $ PostR slug
        _ -> specificLayout (menu CreatePostR, menu CreatePostR, [whamlet|
    Invalid input, try again.
    <form method=post action=@{CreatePostR} enctype=#{enctype}>
        ^{widget}
        <input type=submit>
|])

postEditWidgetStyles :: Widget
postEditWidgetStyles = toWidget [lucius|
    textarea.html {
        width:530px;
        height:300px;
        }
|]

postEditWidget :: PostId -> Widget -> Enctype -> Widget
postEditWidget postId form enctype = [whamlet|
    ^{postEditWidgetStyles}
    <div .post-edit>
        <form method=post action=@{EditPostR postId} enctype=#{enctype}>
            ^{form}
            <input type=submit>
|]


postForm :: (Maybe Post, [Entity Tag]) -> Form (Post, Maybe Text)
postForm (post, tags) = do
    renderDivs $ mk
        <$> areq textField "Title" (postTitle <$> post)
        <*> aformM (liftIO getCurrentTime)
        <*> areq nicHtmlField "Body" (postBody <$> post)
        <*> aformM requireAuthId
        <*> areq boolField "Published" (postPublished <$> post)
        <*> areq (multiSelectFieldList [(tagName $ entityVal n, tagName $ entityVal n) | n <- tags]) "nu" Nothing
        <*> aopt textField "Add new tags: words without spaces, separated with comma." Nothing
            where mk title time body aid published t newtags = (Post title time body aid published "" t, newtags)

commentForm :: PostId -> Form Comment
commentForm postId = renderDivs $ mk
    <$> areq textField "Author" Nothing
    <*> areq textField "Body" Nothing
    <*> aformM (return postId)
    <*> aformM (liftIO getCurrentTime)
    <*> recaptchaAForm
        where mk title author post time () = Comment title author post time

getPostR :: Text -> Handler RepHtml
getPostR slug = do
    authorized <- maybeAdmin
    (Entity postId post) <- runDB $ getBy404 $ UniqueSlug slug
    case (postPublished post) of
        False -> notFound
        True -> do
            comments <- runDB $ selectList [CommentPost ==. postId] [Desc CommentCreated]
            ((_, widget), enctype) <- generateFormPost (commentForm postId)

            specificLayout (menu $ PostR $ postSlug post, emptyWidget, [whamlet|
            $if authorized
                <div .controls>
                    <ul>
                        <li>
                            <a href=@{EditPostR postId}>Edit
                        <li>
                            <a href=@{DeletePostR postId}>Delete
            <div .single-Post>
                <div .header>
                    <h2>
                        #{postTitle post}
                    <span .meta>
                        #{show $ postCreated post}
                <div .body>
                    #{postBody post}
                <div .tags>
                    <ul>
                        $forall tag <- (postTags post)
                            <li>
                                <a href=@{TagR tag}>#{tag}
            <div .comments>
                <h2>
                    Comments
                $forall comment <- comments
                    <div .pretty.comment>
                        <span .header>
                            Created on #{show $ commentCreated (entityVal comment)} by #{commentAuthor (entityVal comment)}
                        <div .body>
                            #{commentBody (entityVal comment)}

                <h2>
                    Create new comment
                <div .pretty.comment-form>
                    <form method=post action=@{PostR $ postSlug post} enctype=#{enctype}>
                        ^{widget}
                        <input type=submit>
|])

postPostR :: Text -> Handler RepHtml
postPostR slug = do
    (Entity postId _) <- runDB $ getBy404 $ UniqueSlug slug
    ((result, widget), enctype) <- runFormPost (commentForm postId)
    case result of
        FormSuccess comment -> do
            _ <- runDB $ insert comment
            setMessage "Thanks for comment!"
            redirect $ PostR slug
        _ -> specificLayout (menu $ PostR slug, emptyWidget, [whamlet|
    Something went wrong. Please check your comment again.
    <form method=post action=@{PostR slug} enctype=#{enctype}>
        ^{widget}
        <input type=submit>
|])

getDeletePostR :: PostId -> Handler RepHtml
getDeletePostR postId = do
    _ <- runDB $ get404 postId
    specificLayout (menu $ DeletePostR postId, menu $ DeletePostR postId, [whamlet|
    Are you sure you want to delete this post?
    <form method=post action=@{DeletePostR postId}>
        <input type=submit value=Yes>
    <form method=get action=@{AdminR}>
        <input type=submit value=No>

|])

postDeletePostR :: PostId -> Handler RepHtml
postDeletePostR postId = do
    runDB $ deleteWhere [CommentPost ==. postId]
    runDB $ delete postId
    setMessage "Post has been deleted."
    redirect AdminR

getEditPostR :: PostId -> Handler RepHtml
getEditPostR postId = do
    tags <- getPostTags
    post <- runDB $ get404 postId
    ((_, widget), enctype) <- generateFormPost (postForm (Just post, tags))
    specificLayout (menu $ EditPostR postId, menu $ EditPostR postId, [whamlet|
        ^{postEditWidget postId widget enctype}
|])

postEditPostR :: PostId -> Handler RepHtml
postEditPostR postId = do
    tags <- getPostTags
    ((result, widget), enctype) <- runFormPost (postForm (Nothing, tags))
    case result of
        FormSuccess (post, newTags) -> do
            case newTagsCorrect newTags of
                False -> invalidArgs [pack "Tags textfield contains bad value. Please follow formatting."]
                True -> do
                    updatePost postId post newTags
                    setMessage "Post has been updated."
                    redirect $ PostR $ postSlug post
        _ -> specificLayout (menu $ EditPostR postId, menu $ EditPostR postId, [whamlet|
    Something went wrong. Check the post again:
<form method=post action=@{EditPostR postId} enctype=#{enctype}>
    ^{widget}
    <input type=submit>
|])

getPostsR :: Handler RepHtml
getPostsR = do
    posts <- runDB $ selectList [PostPublished ==. True] [Desc PostCreated]
    specificLayout (menu PostsR, menu PostsR, [whamlet|
    <div .posts>
        $forall e <- posts
            <div .post ##{show $ entityKey e}>
                <div .header>
                    <h2>
                        <a href=@{PostR $ postSlug $ entityVal e}>
                            #{postTitle (entityVal e)}
                    <span .meta>
                        Posted on #{show $ postCreated (entityVal e)}
                <div .body>
                    #{postBody (entityVal e)}
            <hr .rule>
|])


getTagR :: Text -> Handler RepHtml
getTagR _ = do
    --entries <- runDB $ selectList [PostTags <-. tag] []
    defaultLayout [whamlet|nu|]





